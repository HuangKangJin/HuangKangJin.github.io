<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SSD杂记</title>
    <link href="/2025/02/02/SSD%E6%9D%82%E8%AE%B0/"/>
    <url>/2025/02/02/SSD%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>SSD 的 IOPS</strong>（Input&#x2F;Output Operations Per Second，每秒输入&#x2F;输出操作次数）是衡量 SSD 性能的关键指标，表示每秒能处理的读写操作数量。IOPS 越高，SSD 的响应速度越快，性能越好。</p><h3 id="影响-SSD-IOPS-的因素："><a href="#影响-SSD-IOPS-的因素：" class="headerlink" title="影响 SSD IOPS 的因素："></a>影响 SSD IOPS 的因素：</h3><ol><li><p><strong>NAND 闪存类型</strong>：</p><ul><li>SLC（单层单元）：速度快、寿命长，但成本高。</li><li>MLC（多层单元）：速度、寿命、成本适中。</li><li>TLC（三层单元）：成本低，但速度和寿命较差。</li><li>QLC（四层单元）：成本最低，但速度和寿命更弱。</li></ul></li><li><p><strong>控制器性能</strong>：</p><ul><li>控制器的算法和性能直接影响 SSD 的 IOPS，高效的控制器能提升数据处理速度。</li></ul></li><li><p><strong>接口类型</strong>：</p><ul><li>SATA III：理论带宽 6 Gbps，IOPS 较低。</li><li>NVMe：通过 PCIe 接口，带宽更高，IOPS 显著提升。</li></ul></li><li><p><strong>读写模式</strong>：</p><ul><li>随机读写：通常 IOPS 较低，尤其是随机写入。</li><li>顺序读写：IOPS 较高，适合大文件传输。</li></ul></li><li><p><strong>队列深度</strong>：</p><ul><li>队列深度（QD）越高，IOPS 越高，但延迟也会增加。</li></ul></li></ol><h3 id="典型-SSD-的-IOPS-范围："><a href="#典型-SSD-的-IOPS-范围：" class="headerlink" title="典型 SSD 的 IOPS 范围："></a>典型 SSD 的 IOPS 范围：</h3><ul><li><strong>SATA SSD</strong>：通常为几万到十几万 IOPS。</li><li><strong>NVMe SSD</strong>：可达数十万甚至数百万 IOPS。</li></ul><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><ul><li><strong>高 IOPS 需求</strong>：如数据库、虚拟化、高频交易等场景，需要高 IOPS 以保证快速响应。</li><li><strong>低 IOPS 需求</strong>：如普通办公、家用等场景，对 IOPS 要求较低。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>SSD 的 IOPS 受闪存类型、控制器、接口和读写模式等因素影响，NVMe SSD 通常比 SATA SSD 提供更高的 IOPS，适合高性能需求场景。</p><p>在 SSD（固态硬盘）中，<strong>Write</strong>、<strong>Flush</strong> 和 <strong>TRIM</strong> 是三个重要的操作或命令，分别用于数据写入、缓存刷新和无效数据块管理。以下是它们的详细介绍：</p><hr><h3 id="1-Write（写入）"><a href="#1-Write（写入）" class="headerlink" title="1. Write（写入）"></a>1. <strong>Write（写入）</strong></h3><ul><li><p><strong>定义</strong>：Write 是指将数据从主机（如 CPU 或操作系统）传输到 SSD 的过程。</p></li><li><p><strong>作用</strong>：数据首先被写入 SSD 的缓存（通常是 DRAM 缓存），然后再写入 NAND 闪存。</p></li><li><p><strong>特点</strong>：</p><ul><li>Write 操作可以是同步的或异步的：<ul><li><strong>同步写入</strong>：主机等待数据完全写入 NAND 闪存后才继续执行其他任务。</li><li><strong>异步写入</strong>：数据写入缓存后，主机可以立即继续执行其他任务，缓存中的数据稍后写入 NAND 闪存。</li></ul></li><li>Write 操作的性能受 NAND 闪存类型（如 SLC、TLC、QLC）和接口（如 SATA、NVMe）的影响。</li></ul></li><li><p><strong>应用场景</strong>：</p><ul><li>文件写入、数据库更新等需要将数据存储到 SSD 的场景。</li></ul></li></ul><hr><h3 id="2-Flush（刷新）"><a href="#2-Flush（刷新）" class="headerlink" title="2. Flush（刷新）"></a>2. <strong>Flush（刷新）</strong></h3><ul><li><p><strong>定义</strong>：Flush 是指将缓存中的数据强制写入 NAND 闪存的操作。</p></li><li><p><strong>作用</strong>：确保数据的持久化，防止因断电或系统崩溃导致数据丢失。</p></li><li><p><strong>特点</strong>：</p><ul><li>Flush 操作是同步的，主机需要等待数据完全写入 NAND 闪存后才能继续执行其他任务。</li><li>Flush 通常由操作系统或应用程序显式调用，以确保关键数据的持久性。</li><li>在 SSD 中，Flush 操作可能涉及将 DRAM 缓存中的数据写入 NAND 闪存。</li></ul></li><li><p><strong>应用场景</strong>：</p><ul><li>数据库事务提交时调用 Flush，确保事务数据持久化。</li><li>文件系统调用 <code>fsync()</code> 或 <code>fflush()</code> 时触发 Flush 操作。</li></ul></li><li><p><strong>操作系统支持</strong>：</p><ul><li>Linux：<code>fsync()</code>、<code>fdatasync()</code>。</li><li>Windows：<code>FlushFileBuffers()</code>。</li></ul></li></ul><hr><h3 id="3-TRIM（修剪）"><a href="#3-TRIM（修剪）" class="headerlink" title="3. TRIM（修剪）"></a>3. <strong>TRIM（修剪）</strong></h3><ul><li><p><strong>定义</strong>：TRIM 是一种由操作系统发送给 SSD 的命令，用于通知 SSD 哪些数据块已经不再使用（例如文件被删除后）。</p></li><li><p><strong>作用</strong>：</p><ul><li>标记无效数据块，允许 SSD 在后台进行垃圾回收（Garbage Collection）。</li><li>提高写入性能，减少写入放大（Write Amplification）。</li><li>延长 SSD 寿命。</li></ul></li><li><p><strong>特点</strong>：</p><ul><li>TRIM 命令是异步的，操作系统发送 TRIM 后，SSD 在空闲时处理无效数据块。</li><li>TRIM 需要操作系统和 SSD 同时支持。</li><li>在某些 RAID 配置或旧的操作系统中，TRIM 可能无法正常工作。</li></ul></li><li><p><strong>应用场景</strong>：</p><ul><li>文件删除后，操作系统发送 TRIM 命令，通知 SSD 回收无效数据块。</li><li>定期运行 TRIM 以优化 SSD 性能。</li></ul></li><li><p><strong>操作系统支持</strong>：</p><ul><li>Windows：从 Windows 7 开始支持 TRIM。</li><li>Linux：通过 <code>fstrim</code> 工具或挂载选项 <code>discard</code> 启用 TRIM。</li><li>macOS：默认启用 TRIM。</li></ul></li></ul><hr><h3 id="三者的关系"><a href="#三者的关系" class="headerlink" title="三者的关系"></a>三者的关系</h3><ul><li><strong>Write</strong> 和 <strong>Flush</strong> 关注数据的写入和持久化：<ul><li>Write 将数据写入缓存或 NAND 闪存。</li><li>Flush 确保缓存中的数据持久化到 NAND 闪存。</li></ul></li><li><strong>TRIM</strong> 关注无效数据块的管理：<ul><li>TRIM 通知 SSD 哪些数据块可以回收，从而优化写入性能和延长寿命。</li></ul></li></ul><hr><h3 id="示例流程"><a href="#示例流程" class="headerlink" title="示例流程"></a>示例流程</h3><ol><li><p><strong>数据写入</strong>：</p><ul><li>主机通过 Write 操作将数据写入 SSD 缓存。</li><li>调用 Flush 操作将缓存数据写入 NAND 闪存。</li></ul></li><li><p><strong>数据删除</strong>：</p><ul><li>用户删除文件，操作系统标记相关数据块为无效。</li><li>操作系统发送 TRIM 命令，通知 SSD 回收无效数据块。</li></ul></li><li><p><strong>垃圾回收</strong>：</p><ul><li>SSD 在空闲时执行垃圾回收，擦除无效数据块，为后续写入做准备。</li></ul></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>Write</strong>：将数据写入 SSD 缓存或 NAND 闪存。</li><li><strong>Flush</strong>：将缓存中的数据强制写入 NAND 闪存，确保数据持久化。</li><li><strong>TRIM</strong>：通知 SSD 回收无效数据块，优化性能和寿命。</li></ul><p>理解这三个操作的作用和区别，有助于更好地优化 SSD 的性能和可靠性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SSD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FEMU仿真器学习笔记</title>
    <link href="/2025/01/30/FEMU%E4%BB%BF%E7%9C%9F%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/01/30/FEMU%E4%BB%BF%E7%9C%9F%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="FEMU/nvme%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">FEMU&#x2F;nvme源码分析</a><br>[2] <a href="https://blog.xiocs.com/archives/46/">Femu 源码简析与测试环境配置</a><br>[3] <a href="https://blog.csdn.net/bijie1196/article/details/120752319">安装FEMU，并使用FEMU模拟SSD黑盒、OCSSD、NoSSD</a><br>[4] <a href="https://hackmd.io/@UzwkpqmTSKS3rukkbAQPBw/BJgAcpPIq">FEMU环境配置</a></p><h2 id="FEMU模拟器配置与安装"><a href="#FEMU模拟器配置与安装" class="headerlink" title="FEMU模拟器配置与安装"></a>FEMU模拟器配置与安装</h2><p>主要参考链接[3]和[4]，但是有两个地方是需要修改的。</p><ol><li>参考链接[3], 作者文档中使用的为-localtime，目前的QEMU版本已经移除了该方式，改为了-rtc base&#x3D;localtime</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> qemu-system-x86_64 \<br>-cdrom ubuntu-22.04.1-live-server-amd64.iso \<br>-hda femu.qcow2 \<br>-boot d \<br>-net nic -net user \<br>-m 8192 \<br>-rtc base=localtime -smp 8 \<br>-cpu host \<br>-enable-kvm<br></code></pre></td></tr></table></figure><ol start="2"><li>编译报错FAILED: libqemuutil.a.p&#x2F;util_async.c.o error: storing the address of local variable ‘slice’ in ‘*ctx.bh_slice_list.sqh_las。参考以下方法解决<a href="https://gitlab.com/qemu-project/qemu/-/issues/1655">https://gitlab.com/qemu-project/qemu/-/issues/1655</a>.<br>需要修改femu-compile.sh脚本，增加参数“–disable-werror“，修改如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>NRCPUS=<span class="hljs-string">&quot;<span class="hljs-subst">$(cat /proc/cpuinfo | grep <span class="hljs-string">&quot;vendor_id&quot;</span> | wc -l)</span>&quot;</span><br><br>make clean<br><span class="hljs-comment"># --disable-werror --extra-cflags=-w --disable-git-update</span><br>../configure --enable-kvm --target-list=x86_64-softmmu --disable-werror<br>make -j <span class="hljs-variable">$NRCPUS</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===&gt; FEMU compilation done ...&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>FEMU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FEMU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="/2025/01/29/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/01/29/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>以下内容由DeepSeek生成<br>Hexo 博客框架的常用命令整理，方便快速查阅和使用：</p><hr><h3 id="1-安装与初始化"><a href="#1-安装与初始化" class="headerlink" title="1. 安装与初始化"></a><strong>1. 安装与初始化</strong></h3><ul><li><strong>全局安装 Hexo</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><strong>初始化博客项目</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;文件夹名&gt;  <span class="hljs-comment"># 指定目录初始化</span><br><span class="hljs-built_in">cd</span> &lt;文件夹名&gt;        <span class="hljs-comment"># 进入项目目录</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="2-内容管理"><a href="#2-内容管理" class="headerlink" title="2. 内容管理"></a><strong>2. 内容管理</strong></h3><ul><li><strong>新建文章</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;文章标题&quot;</span>          <span class="hljs-comment"># 在 _posts 目录生成文章</span><br>hexo new draft <span class="hljs-string">&quot;草稿标题&quot;</span>    <span class="hljs-comment"># 在 _drafts 目录创建草稿</span><br></code></pre></td></tr></table></figure></li><li><strong>发布草稿为正式文章</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo publish &lt;草稿文件名&gt;    <span class="hljs-comment"># 将草稿移动到 _posts 目录</span><br></code></pre></td></tr></table></figure></li><li><strong>新建页面（如 About 页面）</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">&quot;about&quot;</span>       <span class="hljs-comment"># 在 source/about/index.md 创建页面</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="3-本地开发与调试"><a href="#3-本地开发与调试" class="headerlink" title="3. 本地开发与调试"></a><strong>3. 本地开发与调试</strong></h3><ul><li><strong>生成静态文件</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate   <span class="hljs-comment"># 简写：hexo g</span><br></code></pre></td></tr></table></figure></li><li><strong>启动本地服务器</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server                <span class="hljs-comment"># 默认端口 4000</span><br>hexo server -p 5000        <span class="hljs-comment"># 指定端口</span><br>hexo server --draft        <span class="hljs-comment"># 预览草稿</span><br></code></pre></td></tr></table></figure></li><li><strong>清理缓存与静态文件</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean     <span class="hljs-comment"># 删除 public 文件夹和缓存</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="4-部署与发布"><a href="#4-部署与发布" class="headerlink" title="4. 部署与发布"></a><strong>4. 部署与发布</strong></h3><ul><li><strong>部署到远程仓库（如 GitHub Pages）</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy    <span class="hljs-comment"># 简写：hexo d</span><br></code></pre></td></tr></table></figure></li><li><strong>生成并一键部署</strong>  <pre><code class="language-bash">hexo deploy --generate   # 简写：hexo d -g</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/26/hello-world/"/>
    <url>/2025/01/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
